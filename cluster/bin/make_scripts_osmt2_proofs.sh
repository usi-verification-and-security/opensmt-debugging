

#!/bin/bash


if [[ $# -lt 5 ]]; then
    echo "Usage: $0 <osmt> <script-dir> <output-dir> <config> <example1> [<example2> [ ... ] ]";
    exit 1;
fi

osmt=$1; shift
scriptd=$1; shift
outd=`readlink -e $1`; shift
config=$1; shift


i=0
# How many processes to run in the node
ncpus=10
# Timeout (this is probably in CPU time so if you run multithreaded,
# mutiply the number by the number of threads)
timeout=1200

while [[ $# > 0 ]]; do
    ex=$1;
    bname=`basename $ex`
    scrname=`printf "osmt.%s.sh" ${bname}`
    echo $scrname
    cat << __EOF__ > $scriptd/$scrname
#!/bin/bash
## Generated by $0
## From $ex
#SBATCH --time=00:10:00
#SBATCH --nodes=1
#SBATCH --exclusive
#SBATCH --mem=0
#SBATCH --output=$outd/$scrname.out
#SBATCH --error=$outd/$scrname.err

osmt_time=$outd/$scrname.osmt
output=$outd/$scrname

config="-r $RANDOM $config"
script=${osmt}
#script=/home/hyvaeria/bin/run-dumper.sh
__EOF__

    for ((i=0; i < $ncpus; i++)); do
        if [[ $# == 0 ]]; then
            break;
        fi
        ex=$1; shift
        cat << __EOF__ >> $scriptd/$scrname
 (
  echo $ex;
  inp=/tmp/\$(basename \${script})-`basename $ex .bz2`;
  bunzip2 -c $ex > \${inp};
  sh -c "ulimit -St ${timeout};
  ulimit -Sv 4000000;
  /usr/bin/time -o \${osmt_time}.${i}.time -f 'user: %U system: %S wall: %e CPU: %PCPU' \$script \$config \$inp" || true; rm \${inp};
 ) > \$output.${i}.out 2> \$output.${i}.err & tar -cjf \$output.${i}.proof.tar ../proof &
__EOF__
    done
    echo "wait" >> $scriptd/$scrname
    i=$((i+1))
    chmod +x $scriptd/$scrname
done
